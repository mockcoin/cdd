# 语法特点

语法以类C语言语法为主，梦丘语言以满足梦丘应用软件开发为首要目的，因受限于硬件性能，梦丘开发也偏向实现简单小型应用。
本语言设计目的不以实现大规模工程为目标，不追求语法功能大而全，以简单、小型化、易掌握为目标。


# 变量定义和附值

目前支持变量类型有: int,float，String。 暂不支持其它变量类型。

可以采用以下方式定义变量

```
int a ;
float b;
int c,d;
int e=0,d;
c=d;
d=1;
String url ="http://jsrun.net"
```

# 行尾分号;不是必须的
如下均是合法语句
```
int a ;
int b
a=a+b
```

# if判断

```
if(a>0){
  //
}else{

}
```
在实践中，有相当数量的大型公司，在编程规范中不建议使用或禁止使用行if。
事实上，本人也出现过耗费大量时间排查BUG，最后发现老代码中的有一条行IF，下方还有几行代码配合了缩进伪装成块if，楞是看了几遍没发现。

CDD也是不支持行 if， 必须以{}包裹代码块

```
//不合法
if(a<0) a=0

//改成合法语句
if(a<0){
 a=0
}

```

# 运算符

符号|功能
--|--
+|加法
-|减
*|乘
/|除
%|取余
>|大与
<|小与
<=|小与等与
>=|大与等与
==|等于
!=|不等于

# 表达式和优先级
暂未实现计算优先级，后期可能为实现但目前不支持，需以（）提升优先级
比如 : 
```
//在传统语言中，会提升乘法运行优先级，其结果是27。
//梦丘语言暂未实现优先级处理,所以其结果42
4*6 +3 =27   

```
手动（）提升优先级
```
//梦丘语言暂需要如此处理优先级 
(4*6) +3
```
其他任何运算符均同理。


# 函数定义及函数调用

函数需定义在最外层

```
int a ; 
void test(){
    a=(3,a);
}

int add(int a,int b ){
    return a+b;
}

```
错误示例：
```
//以下用法， 语法不报错，但会产生不可预料的错误
void a(){
 int a ;      //暂不支持局部变量，强行使用会产生不可预料的错误
 void b(){  //不支持在函数体中定义函数，会产生不可预料的错误
    a =3; 
 }
}

```


# 注释

行注释以 // 开头，注释到行尾

块注释 
```
//  此行注释，以下为块注释

/*
  此区域内均为注释
*/

```
