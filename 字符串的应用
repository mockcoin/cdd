# String变量
此处的String变量，本质上是一个对象， 可以通过点语法调用字符串相关方法（本内容在下一节介绍），是一个挺复杂的东西，但因为其使用之频繁和不可或缺的存在， 在众多编程语言中，String都被视为一个地位如同 int/float一样的基本变量。

## 定义字符串
```
String a;
String url="";
``` 


## 字符串的加法运算
加法运算将处理为字符串拼接,

```
String a＝"jsrun.net/";
String url="";

url+="http://"+a;
mos.println(url);//将在串口输出：http://jsurn.net/

url+=1234  

mos.println(url);//将在串口输出：http://jsurn.net/1234

url=0.01+url ;
mos.println(url);//将在串口输出：0.01http://jsurn.net/1234
``` 

与整形数或浮点数也将拼接接成字符串,不会转为数值运算
```
int a=3
String b ="3";
b+=a;

mos.println(b);//将在串口输出：33 而不是６


```

## 拼接性能上的优化
```
String a="";
a+="你好";
a+=3;
a+=1.02;
```
使用.concatXXX 系统方法，优化一部份性能
如：
```
String a="";
a.concatStr("你好");
a.concatInt(3);
a.concatFloat(1.02);

```
以上代码确实可以优化一些性能，但这种写法较麻烦，有点反人类直觉。 在复杂度较低的情况，效率差异人类可能并无感知。
在复杂度上升时，大级别代码量时可能有很可观的效率提升。 但考虑到梦丘ＭＯＳ的性能限制，不建议写过于复杂的算法让梦丘去执行，可考虑将计算密集型算法在上位机或服务器进行处理， 或预处理出结果存储。





# 特别注意点
受当前编译器技术限制， 一些在其它语言可以正常编译运行的语法在梦丘编译器中会引起一些异常，未来可能会对编译器升级修复，但当下请避免以下情况，以免触发编译器ｂｕｇ。

## 会引起内存泄露的情况
超过２个元素的加法拼接
```
String a="";
a+="3"+"6"+"你好"; //可以正常运行， 但会造成内存泄露
```
请修改为
```
String a="";
a+="3"
a+="6
a+="你好"; //当下最稳妥的方式，不会造成内存泄露
```

## 不支持在循环体中使用字符串常量
```
String str=""
while(1){
  str+=","  //编译将报错
}
```
请修改为
```
String str=""
String comma=","
while(1){
  str+=comma
}
```
